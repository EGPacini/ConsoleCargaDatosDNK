//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleCargaDatosDNK.Modelos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class hwmdbEntities : DbContext
    {
        public hwmdbEntities()
            : base("name=hwmdbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationLog> C__MigrationLog { get; set; }
        public virtual DbSet<AbortCodeLookup> AbortCodeLookup { get; set; }
        public virtual DbSet<AccessTechnologyTypes> AccessTechnologyTypes { get; set; }
        public virtual DbSet<AccountLeakOptions> AccountLeakOptions { get; set; }
        public virtual DbSet<accounts> accounts { get; set; }
        public virtual DbSet<AccountTypeLookup> AccountTypeLookup { get; set; }
        public virtual DbSet<ActuationsPegasus> ActuationsPegasus { get; set; }
        public virtual DbSet<alarmconditions> alarmconditions { get; set; }
        public virtual DbSet<alarmforwarding> alarmforwarding { get; set; }
        public virtual DbSet<alarms> alarms { get; set; }
        public virtual DbSet<alarmTypes> alarmTypes { get; set; }
        public virtual DbSet<APIQuotas> APIQuotas { get; set; }
        public virtual DbSet<ApplicationConfigLog> ApplicationConfigLog { get; set; }
        public virtual DbSet<ApplicationSettings> ApplicationSettings { get; set; }
        public virtual DbSet<associations> associations { get; set; }
        public virtual DbSet<ATSInfoTable> ATSInfoTable { get; set; }
        public virtual DbSet<BandPassFilter> BandPassFilter { get; set; }
        public virtual DbSet<CategoryofPermitCodeLookup> CategoryofPermitCodeLookup { get; set; }
        public virtual DbSet<celltable> celltable { get; set; }
        public virtual DbSet<ChamberTypes> ChamberTypes { get; set; }
        public virtual DbSet<channels> channels { get; set; }
        public virtual DbSet<ChannelTypeChartOptions> ChannelTypeChartOptions { get; set; }
        public virtual DbSet<ChannelTypes> ChannelTypes { get; set; }
        public virtual DbSet<correlationAccountMeta> correlationAccountMeta { get; set; }
        public virtual DbSet<correlationPath> correlationPath { get; set; }
        public virtual DbSet<CorrelationResults> CorrelationResults { get; set; }
        public virtual DbSet<correlationTestPaths> correlationTestPaths { get; set; }
        public virtual DbSet<CountyCodes> CountyCodes { get; set; }
        public virtual DbSet<dataexport> dataexport { get; set; }
        public virtual DbSet<datapoints> datapoints { get; set; }
        public virtual DbSet<DatFileLocations> DatFileLocations { get; set; }
        public virtual DbSet<DatFiles> DatFiles { get; set; }
        public virtual DbSet<DeviceSummary> DeviceSummary { get; set; }
        public virtual DbSet<exportindex> exportindex { get; set; }
        public virtual DbSet<FavouriteSignalList> FavouriteSignalList { get; set; }
        public virtual DbSet<FavouriteSignalListData> FavouriteSignalListData { get; set; }
        public virtual DbSet<firmwareupdates> firmwareupdates { get; set; }
        public virtual DbSet<fleetreportoptions> fleetreportoptions { get; set; }
        public virtual DbSet<flowpegasus> flowpegasus { get; set; }
        public virtual DbSet<gascalorificvalues> gascalorificvalues { get; set; }
        public virtual DbSet<gaszone> gaszone { get; set; }
        public virtual DbSet<GDImportDataFileLog> GDImportDataFileLog { get; set; }
        public virtual DbSet<GDImportDataFiles> GDImportDataFiles { get; set; }
        public virtual DbSet<GNetalerts> GNetalerts { get; set; }
        public virtual DbSet<GNetalertTypes> GNetalertTypes { get; set; }
        public virtual DbSet<GNetaudit> GNetaudit { get; set; }
        public virtual DbSet<GNetchannelTypes> GNetchannelTypes { get; set; }
        public virtual DbSet<GNetcustomers> GNetcustomers { get; set; }
        public virtual DbSet<GNethubs> GNethubs { get; set; }
        public virtual DbSet<GNetlocations> GNetlocations { get; set; }
        public virtual DbSet<GNetmessages> GNetmessages { get; set; }
        public virtual DbSet<GNetmonthlyReport> GNetmonthlyReport { get; set; }
        public virtual DbSet<GNetsites> GNetsites { get; set; }
        public virtual DbSet<GNettransmitterChannels> GNettransmitterChannels { get; set; }
        public virtual DbSet<GNettransmitterData> GNettransmitterData { get; set; }
        public virtual DbSet<GNettransmitterFlushEvents> GNettransmitterFlushEvents { get; set; }
        public virtual DbSet<GNettransmitterFlushSettings> GNettransmitterFlushSettings { get; set; }
        public virtual DbSet<GNettransmitterLocations> GNettransmitterLocations { get; set; }
        public virtual DbSet<GNettransmitters> GNettransmitters { get; set; }
        public virtual DbSet<GNettransmitterTemperatureSettings> GNettransmitterTemperatureSettings { get; set; }
        public virtual DbSet<GNettransmitterTypes> GNettransmitterTypes { get; set; }
        public virtual DbSet<GNetuserRoles> GNetuserRoles { get; set; }
        public virtual DbSet<GNetusers> GNetusers { get; set; }
        public virtual DbSet<GNetuserSites> GNetuserSites { get; set; }
        public virtual DbSet<histograms> histograms { get; set; }
        public virtual DbSet<hubs> hubs { get; set; }
        public virtual DbSet<InstallationReport> InstallationReport { get; set; }
        public virtual DbSet<installsite> installsite { get; set; }
        public virtual DbSet<InvestigationAuth> InvestigationAuth { get; set; }
        public virtual DbSet<leakconfirmation> leakconfirmation { get; set; }
        public virtual DbSet<leakconfirmationassociation> leakconfirmationassociation { get; set; }
        public virtual DbSet<LeakDetectionOptions> LeakDetectionOptions { get; set; }
        public virtual DbSet<leakstatuslookup> leakstatuslookup { get; set; }
        public virtual DbSet<lnstable> lnstable { get; set; }
        public virtual DbSet<LoggerAccessTechnology> LoggerAccessTechnology { get; set; }
        public virtual DbSet<LoggerCommandHistory> LoggerCommandHistory { get; set; }
        public virtual DbSet<loggerconfigurationdata> loggerconfigurationdata { get; set; }
        public virtual DbSet<LoggerFilterConfiguration> LoggerFilterConfiguration { get; set; }
        public virtual DbSet<LoggerLevelAndSpread> LoggerLevelAndSpread { get; set; }
        public virtual DbSet<loggermeterreadings> loggermeterreadings { get; set; }
        public virtual DbSet<loggerRecordingAudit> loggerRecordingAudit { get; set; }
        public virtual DbSet<loggerrecordings> loggerrecordings { get; set; }
        public virtual DbSet<loggers> loggers { get; set; }
        public virtual DbSet<loggersecuretypes> loggersecuretypes { get; set; }
        public virtual DbSet<LoggerTypeIdentification> LoggerTypeIdentification { get; set; }
        public virtual DbSet<lookuptables> lookuptables { get; set; }
        public virtual DbSet<Maintenance> Maintenance { get; set; }
        public virtual DbSet<MaintenanceInstallation> MaintenanceInstallation { get; set; }
        public virtual DbSet<MaintenanceJob> MaintenanceJob { get; set; }
        public virtual DbSet<MaintenanceJobSitePhoto> MaintenanceJobSitePhoto { get; set; }
        public virtual DbSet<MaintenanceJobStatus> MaintenanceJobStatus { get; set; }
        public virtual DbSet<MaintenanceJobType> MaintenanceJobType { get; set; }
        public virtual DbSet<MaintenanceReports> MaintenanceReports { get; set; }
        public virtual DbSet<MaintenanceReportsServerStatus> MaintenanceReportsServerStatus { get; set; }
        public virtual DbSet<messageindex> messageindex { get; set; }
        public virtual DbSet<messages> messages { get; set; }
        public virtual DbSet<networklookup> networklookup { get; set; }
        public virtual DbSet<NGFileExportLog> NGFileExportLog { get; set; }
        public virtual DbSet<NGFileExportSchedule> NGFileExportSchedule { get; set; }
        public virtual DbSet<NGFileRejectResponse> NGFileRejectResponse { get; set; }
        public virtual DbSet<NGJobOutcome> NGJobOutcome { get; set; }
        public virtual DbSet<NGJobType> NGJobType { get; set; }
        public virtual DbSet<NGOutcomeReason> NGOutcomeReason { get; set; }
        public virtual DbSet<NGRequest> NGRequest { get; set; }
        public virtual DbSet<NGSitePhoto> NGSitePhoto { get; set; }
        public virtual DbSet<NGSiteVisit> NGSiteVisit { get; set; }
        public virtual DbSet<NGSiteVisitComment> NGSiteVisitComment { get; set; }
        public virtual DbSet<NGSiteVisitStockItems> NGSiteVisitStockItems { get; set; }
        public virtual DbSet<NGStatus> NGStatus { get; set; }
        public virtual DbSet<NGStockItems> NGStockItems { get; set; }
        public virtual DbSet<NGTransactionStatus> NGTransactionStatus { get; set; }
        public virtual DbSet<openchannelconversion> openchannelconversion { get; set; }
        public virtual DbSet<openchannelheader> openchannelheader { get; set; }
        public virtual DbSet<PipeDiameterRanges> PipeDiameterRanges { get; set; }
        public virtual DbSet<PipeMappingFromGIS> PipeMappingFromGIS { get; set; }
        public virtual DbSet<PipeMaterialTypes> PipeMaterialTypes { get; set; }
        public virtual DbSet<PipeNetwork> PipeNetwork { get; set; }
        public virtual DbSet<PipeSize> PipeSize { get; set; }
        public virtual DbSet<pmzbigtimedata> pmzbigtimedata { get; set; }
        public virtual DbSet<pmzmessagelog> pmzmessagelog { get; set; }
        public virtual DbSet<pmzoffstimedata> pmzoffstimedata { get; set; }
        public virtual DbSet<pmzpressflowdata> pmzpressflowdata { get; set; }
        public virtual DbSet<pmzpresstimedata> pmzpresstimedata { get; set; }
        public virtual DbSet<pmzsettings> pmzsettings { get; set; }
        public virtual DbSet<RaisedAsLookup> RaisedAsLookup { get; set; }
        public virtual DbSet<recentsites> recentsites { get; set; }
        public virtual DbSet<recordingspoints> recordingspoints { get; set; }
        public virtual DbSet<RepairedAsLookup> RepairedAsLookup { get; set; }
        public virtual DbSet<roles> roles { get; set; }
        public virtual DbSet<RTLTransmitters> RTLTransmitters { get; set; }
        public virtual DbSet<ScheduledReportLookup> ScheduledReportLookup { get; set; }
        public virtual DbSet<ShapeFileIconConfiguration> ShapeFileIconConfiguration { get; set; }
        public virtual DbSet<ShapeFiles> ShapeFiles { get; set; }
        public virtual DbSet<SiteCoordinates> SiteCoordinates { get; set; }
        public virtual DbSet<SiteLeakStatusHistory> SiteLeakStatusHistory { get; set; }
        public virtual DbSet<SiteLeakThresholdHistory> SiteLeakThresholdHistory { get; set; }
        public virtual DbSet<SiteLoggerUserActions> SiteLoggerUserActions { get; set; }
        public virtual DbSet<sitephotos> sitephotos { get; set; }
        public virtual DbSet<sites> sites { get; set; }
        public virtual DbSet<SMSFailures> SMSFailures { get; set; }
        public virtual DbSet<smsjobtable> smsjobtable { get; set; }
        public virtual DbSet<smsrequesttable> smsrequesttable { get; set; }
        public virtual DbSet<softwarelookup> softwarelookup { get; set; }
        public virtual DbSet<SoundVelocityLookup> SoundVelocityLookup { get; set; }
        public virtual DbSet<statuspegasus> statuspegasus { get; set; }
        public virtual DbSet<steptestcredits> steptestcredits { get; set; }
        public virtual DbSet<steptesthistory> steptesthistory { get; set; }
        public virtual DbSet<SystemNotification> SystemNotification { get; set; }
        public virtual DbSet<timepegasus> timepegasus { get; set; }
        public virtual DbSet<TMAOptions> TMAOptions { get; set; }
        public virtual DbSet<torancounts> torancounts { get; set; }
        public virtual DbSet<unitslookup> unitslookup { get; set; }
        public virtual DbSet<user_device> user_device { get; set; }
        public virtual DbSet<UserChannelChartTypes> UserChannelChartTypes { get; set; }
        public virtual DbSet<UserNotificationAcknowledgement> UserNotificationAcknowledgement { get; set; }
        public virtual DbSet<userpasswords> userpasswords { get; set; }
        public virtual DbSet<users> users { get; set; }
        public virtual DbSet<UserUnitLookup> UserUnitLookup { get; set; }
        public virtual DbSet<witsendpoints> witsendpoints { get; set; }
        public virtual DbSet<witssitedetails> witssitedetails { get; set; }
        public virtual DbSet<WorkOrderLeakConfAssociation> WorkOrderLeakConfAssociation { get; set; }
        public virtual DbSet<WWAlarmSettingsTable> WWAlarmSettingsTable { get; set; }
        public virtual DbSet<Measurements> Measurements { get; set; }
        public virtual DbSet<Survey> Survey { get; set; }
        public virtual DbSet<ApplicationLookup> ApplicationLookup { get; set; }
        public virtual DbSet<MaintenanceInstallationReportStatus> MaintenanceInstallationReportStatus { get; set; }
        public virtual DbSet<MaintenanceInstallationType> MaintenanceInstallationType { get; set; }
        public virtual DbSet<MaintenanceJobStatusComment> MaintenanceJobStatusComment { get; set; }
        public virtual DbSet<NGFileSequence> NGFileSequence { get; set; }
        public virtual DbSet<Predictive> Predictive { get; set; }
        public virtual DbSet<Predictive_AlarmCount> Predictive_AlarmCount { get; set; }
        public virtual DbSet<Predictive_Audit> Predictive_Audit { get; set; }
        public virtual DbSet<PredictiveAlarmSetting> PredictiveAlarmSetting { get; set; }
        public virtual DbSet<tempchannels> tempchannels { get; set; }
        public virtual DbSet<tempsiteList> tempsiteList { get; set; }
        public virtual DbSet<C__MigrationLogCurrent> C__MigrationLogCurrent { get; set; }
    
        [DbFunction("hwmdbEntities", "fnGetAccountIDAndDescendents")]
        public virtual IQueryable<fnGetAccountIDAndDescendents_Result> fnGetAccountIDAndDescendents(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetAccountIDAndDescendents_Result>("[hwmdbEntities].[fnGetAccountIDAndDescendents](@accountId)", accountIdParameter);
        }
    
        [DbFunction("hwmdbEntities", "fnGetAccountIDsforDescendents")]
        public virtual IQueryable<fnGetAccountIDsforDescendents_Result> fnGetAccountIDsforDescendents(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetAccountIDsforDescendents_Result>("[hwmdbEntities].[fnGetAccountIDsforDescendents](@accountId)", accountIdParameter);
        }
    
        [DbFunction("hwmdbEntities", "fnGetAccountImmediateDescendantsByID")]
        public virtual IQueryable<fnGetAccountImmediateDescendantsByID_Result> fnGetAccountImmediateDescendantsByID(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetAccountImmediateDescendantsByID_Result>("[hwmdbEntities].[fnGetAccountImmediateDescendantsByID](@accountId)", accountIdParameter);
        }
    
        [DbFunction("hwmdbEntities", "intlist_to_tbl")]
        public virtual IQueryable<intlist_to_tbl_Result> intlist_to_tbl(string list)
        {
            var listParameter = list != null ?
                new ObjectParameter("list", list) :
                new ObjectParameter("list", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<intlist_to_tbl_Result>("[hwmdbEntities].[intlist_to_tbl](@list)", listParameter);
        }
    
        [DbFunction("hwmdbEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[hwmdbEntities].[SplitString](@stringToSplit)", stringToSplitParameter);
        }
    
        [DbFunction("hwmdbEntities", "StringToArray")]
        public virtual IQueryable<StringToArray_Result> StringToArray(string inStr)
        {
            var inStrParameter = inStr != null ?
                new ObjectParameter("InStr", inStr) :
                new ObjectParameter("InStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<StringToArray_Result>("[hwmdbEntities].[StringToArray](@InStr)", inStrParameter);
        }
    
        public virtual ObjectResult<spGetMostRecentEasyIDandSerialNumberIfNoDevice_Result> spGetMostRecentEasyIDandSerialNumberIfNoDevice(Nullable<int> site_ID)
        {
            var site_IDParameter = site_ID.HasValue ?
                new ObjectParameter("Site_ID", site_ID) :
                new ObjectParameter("Site_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMostRecentEasyIDandSerialNumberIfNoDevice_Result>("spGetMostRecentEasyIDandSerialNumberIfNoDevice", site_IDParameter);
        }
    
        public virtual ObjectResult<GenerateLeakListReportByAccountId_Result> GenerateLeakListReportByAccountId(string accountID, Nullable<decimal> calculatedTotalCostOfLeakDuration, Nullable<decimal> calculatedAnnualizedDuration)
        {
            var accountIDParameter = accountID != null ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(string));
    
            var calculatedTotalCostOfLeakDurationParameter = calculatedTotalCostOfLeakDuration.HasValue ?
                new ObjectParameter("CalculatedTotalCostOfLeakDuration", calculatedTotalCostOfLeakDuration) :
                new ObjectParameter("CalculatedTotalCostOfLeakDuration", typeof(decimal));
    
            var calculatedAnnualizedDurationParameter = calculatedAnnualizedDuration.HasValue ?
                new ObjectParameter("CalculatedAnnualizedDuration", calculatedAnnualizedDuration) :
                new ObjectParameter("CalculatedAnnualizedDuration", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateLeakListReportByAccountId_Result>("GenerateLeakListReportByAccountId", accountIDParameter, calculatedTotalCostOfLeakDurationParameter, calculatedAnnualizedDurationParameter);
        }
    
        public virtual ObjectResult<GetMostRecentEasyIDandSerialNumberIfNoDevice_Result> GetMostRecentEasyIDandSerialNumberIfNoDevice(Nullable<int> site_ID)
        {
            var site_IDParameter = site_ID.HasValue ?
                new ObjectParameter("Site_ID", site_ID) :
                new ObjectParameter("Site_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMostRecentEasyIDandSerialNumberIfNoDevice_Result>("GetMostRecentEasyIDandSerialNumberIfNoDevice", site_IDParameter);
        }
    
        public virtual ObjectResult<GetRealTimeCommunication_Result> GetRealTimeCommunication(string accounts)
        {
            var accountsParameter = accounts != null ?
                new ObjectParameter("accounts", accounts) :
                new ObjectParameter("accounts", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRealTimeCommunication_Result>("GetRealTimeCommunication", accountsParameter);
        }
    
        public virtual int sp_generate_insertscripts(string tABLENAME, string fILTER_CONDITION)
        {
            var tABLENAMEParameter = tABLENAME != null ?
                new ObjectParameter("TABLENAME", tABLENAME) :
                new ObjectParameter("TABLENAME", typeof(string));
    
            var fILTER_CONDITIONParameter = fILTER_CONDITION != null ?
                new ObjectParameter("FILTER_CONDITION", fILTER_CONDITION) :
                new ObjectParameter("FILTER_CONDITION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_generate_insertscripts", tABLENAMEParameter, fILTER_CONDITIONParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCheckLeakState(Nullable<int> accountId, Nullable<int> loggerMode, Nullable<int> daysinLeak)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var loggerModeParameter = loggerMode.HasValue ?
                new ObjectParameter("loggerMode", loggerMode) :
                new ObjectParameter("loggerMode", typeof(int));
    
            var daysinLeakParameter = daysinLeak.HasValue ?
                new ObjectParameter("daysinLeak", daysinLeak) :
                new ObjectParameter("daysinLeak", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCheckLeakState", accountIdParameter, loggerModeParameter, daysinLeakParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCheckLeakStateByKey(Nullable<int> accountId, string loggerMode, Nullable<int> daysinLeak)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var loggerModeParameter = loggerMode != null ?
                new ObjectParameter("loggerMode", loggerMode) :
                new ObjectParameter("loggerMode", typeof(string));
    
            var daysinLeakParameter = daysinLeak.HasValue ?
                new ObjectParameter("daysinLeak", daysinLeak) :
                new ObjectParameter("daysinLeak", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCheckLeakStateByKey", accountIdParameter, loggerModeParameter, daysinLeakParameter);
        }
    
        public virtual int spDeleteDMA(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDMA", accountIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetAccountEntireTreeStructure(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetAccountEntireTreeStructure", accountIdParameter);
        }
    
        public virtual ObjectResult<spGetAccountLeakOptionsforAutoCorrelation_Result> spGetAccountLeakOptionsforAutoCorrelation(string serverAddress, Nullable<bool> ignoreServerAddress)
        {
            var serverAddressParameter = serverAddress != null ?
                new ObjectParameter("ServerAddress", serverAddress) :
                new ObjectParameter("ServerAddress", typeof(string));
    
            var ignoreServerAddressParameter = ignoreServerAddress.HasValue ?
                new ObjectParameter("IgnoreServerAddress", ignoreServerAddress) :
                new ObjectParameter("IgnoreServerAddress", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAccountLeakOptionsforAutoCorrelation_Result>("spGetAccountLeakOptionsforAutoCorrelation", serverAddressParameter, ignoreServerAddressParameter);
        }
    
        public virtual ObjectResult<spGetAccountLeakOptionsforCaching_Result> spGetAccountLeakOptionsforCaching(string serverAddress)
        {
            var serverAddressParameter = serverAddress != null ?
                new ObjectParameter("serverAddress", serverAddress) :
                new ObjectParameter("serverAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAccountLeakOptionsforCaching_Result>("spGetAccountLeakOptionsforCaching", serverAddressParameter);
        }
    
        public virtual ObjectResult<spGetAccountSites_Result> spGetAccountSites()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAccountSites_Result>("spGetAccountSites");
        }
    
        public virtual ObjectResult<spGetAccountSitesByTextSearch_Result> spGetAccountSitesByTextSearch(Nullable<int> accountid, string searchText)
        {
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAccountSitesByTextSearch_Result>("spGetAccountSitesByTextSearch", accountidParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<spGetAllAssociatedSites_Result> spGetAllAssociatedSites(Nullable<int> accountId, Nullable<int> category)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllAssociatedSites_Result>("spGetAllAssociatedSites", accountIdParameter, categoryParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetAllDescendentsForLeakAccount(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetAllDescendentsForLeakAccount", accountIdParameter);
        }
    
        public virtual ObjectResult<spGetAllSitesUpdatedSince_Result> spGetAllSitesUpdatedSince(Nullable<System.DateTime> startdate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllSitesUpdatedSince_Result>("spGetAllSitesUpdatedSince", startdateParameter);
        }
    
        public virtual ObjectResult<spGetAutoCorrelationResultsRange_Result> spGetAutoCorrelationResultsRange(Nullable<int> accountId, Nullable<int> leakCondition, string sortTerm, Nullable<int> direction, Nullable<int> pageStart, Nullable<int> pageSize, Nullable<bool> includeDeleted, Nullable<int> siteId1, Nullable<int> siteId2)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var leakConditionParameter = leakCondition.HasValue ?
                new ObjectParameter("leakCondition", leakCondition) :
                new ObjectParameter("leakCondition", typeof(int));
    
            var sortTermParameter = sortTerm != null ?
                new ObjectParameter("sortTerm", sortTerm) :
                new ObjectParameter("sortTerm", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("direction", direction) :
                new ObjectParameter("direction", typeof(int));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("pageStart", pageStart) :
                new ObjectParameter("pageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("includeDeleted", includeDeleted) :
                new ObjectParameter("includeDeleted", typeof(bool));
    
            var siteId1Parameter = siteId1.HasValue ?
                new ObjectParameter("siteId1", siteId1) :
                new ObjectParameter("siteId1", typeof(int));
    
            var siteId2Parameter = siteId2.HasValue ?
                new ObjectParameter("siteId2", siteId2) :
                new ObjectParameter("siteId2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAutoCorrelationResultsRange_Result>("spGetAutoCorrelationResultsRange", accountIdParameter, leakConditionParameter, sortTermParameter, directionParameter, pageStartParameter, pageSizeParameter, includeDeletedParameter, siteId1Parameter, siteId2Parameter);
        }
    
        public virtual int spGetAutoCorrelationResultsWithSiteSearch(Nullable<int> accountId, Nullable<System.DateTime> startDate, Nullable<int> leakCondition, string sortTerm, Nullable<int> direction, Nullable<int> pageStart, Nullable<int> pageSize, Nullable<bool> includeDeleted, Nullable<int> siteId1, Nullable<int> siteId2)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var leakConditionParameter = leakCondition.HasValue ?
                new ObjectParameter("leakCondition", leakCondition) :
                new ObjectParameter("leakCondition", typeof(int));
    
            var sortTermParameter = sortTerm != null ?
                new ObjectParameter("sortTerm", sortTerm) :
                new ObjectParameter("sortTerm", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("direction", direction) :
                new ObjectParameter("direction", typeof(int));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("pageStart", pageStart) :
                new ObjectParameter("pageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("includeDeleted", includeDeleted) :
                new ObjectParameter("includeDeleted", typeof(bool));
    
            var siteId1Parameter = siteId1.HasValue ?
                new ObjectParameter("siteId1", siteId1) :
                new ObjectParameter("siteId1", typeof(int));
    
            var siteId2Parameter = siteId2.HasValue ?
                new ObjectParameter("siteId2", siteId2) :
                new ObjectParameter("siteId2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAutoCorrelationResultsWithSiteSearch", accountIdParameter, startDateParameter, leakConditionParameter, sortTermParameter, directionParameter, pageStartParameter, pageSizeParameter, includeDeletedParameter, siteId1Parameter, siteId2Parameter);
        }
    
        public virtual ObjectResult<spGetAutoCorrelationSites_Result> spGetAutoCorrelationSites(Nullable<int> accountId, Nullable<System.DateTime> startDate, Nullable<int> leakCondition, string sortTerm, Nullable<int> sortDirection, Nullable<int> pageStart, Nullable<int> pageSize, Nullable<bool> includeDeleted, Nullable<bool> includeSitesForSubAccounts)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var leakConditionParameter = leakCondition.HasValue ?
                new ObjectParameter("leakCondition", leakCondition) :
                new ObjectParameter("leakCondition", typeof(int));
    
            var sortTermParameter = sortTerm != null ?
                new ObjectParameter("sortTerm", sortTerm) :
                new ObjectParameter("sortTerm", typeof(string));
    
            var sortDirectionParameter = sortDirection.HasValue ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(int));
    
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("pageStart", pageStart) :
                new ObjectParameter("pageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var includeDeletedParameter = includeDeleted.HasValue ?
                new ObjectParameter("includeDeleted", includeDeleted) :
                new ObjectParameter("includeDeleted", typeof(bool));
    
            var includeSitesForSubAccountsParameter = includeSitesForSubAccounts.HasValue ?
                new ObjectParameter("includeSitesForSubAccounts", includeSitesForSubAccounts) :
                new ObjectParameter("includeSitesForSubAccounts", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAutoCorrelationSites_Result>("spGetAutoCorrelationSites", accountIdParameter, startDateParameter, leakConditionParameter, sortTermParameter, sortDirectionParameter, pageStartParameter, pageSizeParameter, includeDeletedParameter, includeSitesForSubAccountsParameter);
        }
    
        public virtual int spGetFilteredLeakDetectionOptionsforLeakMap(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites, Nullable<System.DateTime> newLeakThresholdDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            var newLeakThresholdDateParameter = newLeakThresholdDate.HasValue ?
                new ObjectParameter("newLeakThresholdDate", newLeakThresholdDate) :
                new ObjectParameter("newLeakThresholdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetFilteredLeakDetectionOptionsforLeakMap", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter, newLeakThresholdDateParameter);
        }
    
        public virtual ObjectResult<spGetFilteredLeakMapAssets_Result> spGetFilteredLeakMapAssets(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites, Nullable<System.DateTime> newLeakThresholdDate, Nullable<System.DateTime> currentDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            var newLeakThresholdDateParameter = newLeakThresholdDate.HasValue ?
                new ObjectParameter("newLeakThresholdDate", newLeakThresholdDate) :
                new ObjectParameter("newLeakThresholdDate", typeof(System.DateTime));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFilteredLeakMapAssets_Result>("spGetFilteredLeakMapAssets", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter, newLeakThresholdDateParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<spGetFilteredLeakMapAssets2_Result> spGetFilteredLeakMapAssets2(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites, Nullable<System.DateTime> newLeakThresholdDate, Nullable<System.DateTime> currentDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            var newLeakThresholdDateParameter = newLeakThresholdDate.HasValue ?
                new ObjectParameter("newLeakThresholdDate", newLeakThresholdDate) :
                new ObjectParameter("newLeakThresholdDate", typeof(System.DateTime));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFilteredLeakMapAssets2_Result>("spGetFilteredLeakMapAssets2", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter, newLeakThresholdDateParameter, currentDateParameter);
        }
    
        public virtual int spGetFilteredLeakMapAssetsCount(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites, Nullable<System.DateTime> newLeakThresholdDate, Nullable<System.DateTime> currentDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            var newLeakThresholdDateParameter = newLeakThresholdDate.HasValue ?
                new ObjectParameter("newLeakThresholdDate", newLeakThresholdDate) :
                new ObjectParameter("newLeakThresholdDate", typeof(System.DateTime));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetFilteredLeakMapAssetsCount", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter, newLeakThresholdDateParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<spGetFilteredLeakMapAssetsCustom_Result> spGetFilteredLeakMapAssetsCustom(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> newLeakThresholdDate, Nullable<System.DateTime> currentDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var newLeakThresholdDateParameter = newLeakThresholdDate.HasValue ?
                new ObjectParameter("newLeakThresholdDate", newLeakThresholdDate) :
                new ObjectParameter("newLeakThresholdDate", typeof(System.DateTime));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFilteredLeakMapAssetsCustom_Result>("spGetFilteredLeakMapAssetsCustom", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter, startDateParameter, endDateParameter, newLeakThresholdDateParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<spGetFilteredLeakMapAssetsCustom2_Result> spGetFilteredLeakMapAssetsCustom2(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> newLeakThresholdDate, Nullable<System.DateTime> currentDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var newLeakThresholdDateParameter = newLeakThresholdDate.HasValue ?
                new ObjectParameter("newLeakThresholdDate", newLeakThresholdDate) :
                new ObjectParameter("newLeakThresholdDate", typeof(System.DateTime));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFilteredLeakMapAssetsCustom2_Result>("spGetFilteredLeakMapAssetsCustom2", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter, startDateParameter, endDateParameter, newLeakThresholdDateParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<spGetFilteredLeakMapAssetsCustomDateRange_Result> spGetFilteredLeakMapAssetsCustomDateRange(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> newLeakThresholdDate, Nullable<System.DateTime> currentDate)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var newLeakThresholdDateParameter = newLeakThresholdDate.HasValue ?
                new ObjectParameter("newLeakThresholdDate", newLeakThresholdDate) :
                new ObjectParameter("newLeakThresholdDate", typeof(System.DateTime));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFilteredLeakMapAssetsCustomDateRange_Result>("spGetFilteredLeakMapAssetsCustomDateRange", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter, startDateParameter, endDateParameter, newLeakThresholdDateParameter, currentDateParameter);
        }
    
        public virtual int spGetFilteredMapSites(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetFilteredMapSites", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetFilteredSiteIds(Nullable<int> accountId, string searchText, Nullable<int> filterCallIn, Nullable<bool> onlyActiveSites, Nullable<int> siteFilterValue, Nullable<int> leakFilterValue, Nullable<int> quietDays, Nullable<int> filterSelected, string selectedSites)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var filterCallInParameter = filterCallIn.HasValue ?
                new ObjectParameter("filterCallIn", filterCallIn) :
                new ObjectParameter("filterCallIn", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("onlyActiveSites", onlyActiveSites) :
                new ObjectParameter("onlyActiveSites", typeof(bool));
    
            var siteFilterValueParameter = siteFilterValue.HasValue ?
                new ObjectParameter("siteFilterValue", siteFilterValue) :
                new ObjectParameter("siteFilterValue", typeof(int));
    
            var leakFilterValueParameter = leakFilterValue.HasValue ?
                new ObjectParameter("leakFilterValue", leakFilterValue) :
                new ObjectParameter("leakFilterValue", typeof(int));
    
            var quietDaysParameter = quietDays.HasValue ?
                new ObjectParameter("quietDays", quietDays) :
                new ObjectParameter("quietDays", typeof(int));
    
            var filterSelectedParameter = filterSelected.HasValue ?
                new ObjectParameter("filterSelected", filterSelected) :
                new ObjectParameter("filterSelected", typeof(int));
    
            var selectedSitesParameter = selectedSites != null ?
                new ObjectParameter("selectedSites", selectedSites) :
                new ObjectParameter("selectedSites", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetFilteredSiteIds", accountIdParameter, searchTextParameter, filterCallInParameter, onlyActiveSitesParameter, siteFilterValueParameter, leakFilterValueParameter, quietDaysParameter, filterSelectedParameter, selectedSitesParameter);
        }
    
        public virtual ObjectResult<spGetMessagesandLoggerDetailsforAccount_Result> spGetMessagesandLoggerDetailsforAccount(Nullable<int> accountId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> lastmessageId, Nullable<bool> isSdx, Nullable<bool> statusmessagesonly)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var lastmessageIdParameter = lastmessageId.HasValue ?
                new ObjectParameter("lastmessageId", lastmessageId) :
                new ObjectParameter("lastmessageId", typeof(int));
    
            var isSdxParameter = isSdx.HasValue ?
                new ObjectParameter("isSdx", isSdx) :
                new ObjectParameter("isSdx", typeof(bool));
    
            var statusmessagesonlyParameter = statusmessagesonly.HasValue ?
                new ObjectParameter("statusmessagesonly", statusmessagesonly) :
                new ObjectParameter("statusmessagesonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMessagesandLoggerDetailsforAccount_Result>("spGetMessagesandLoggerDetailsforAccount", accountIdParameter, startDateParameter, endDateParameter, lastmessageIdParameter, isSdxParameter, statusmessagesonlyParameter);
        }
    
        public virtual int spGetNextNGSequence(string fileType, ObjectParameter sequenceNo)
        {
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("fileType", fileType) :
                new ObjectParameter("fileType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetNextNGSequence", fileTypeParameter, sequenceNo);
        }
    
        public virtual ObjectResult<spGetPagedLeakMapAssets_Result> spGetPagedLeakMapAssets(string siteIds)
        {
            var siteIdsParameter = siteIds != null ?
                new ObjectParameter("siteIds", siteIds) :
                new ObjectParameter("siteIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPagedLeakMapAssets_Result>("spGetPagedLeakMapAssets", siteIdsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetQuietSites(Nullable<int> accountId, Nullable<int> quietdays)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var quietdaysParameter = quietdays.HasValue ?
                new ObjectParameter("quietdays", quietdays) :
                new ObjectParameter("quietdays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetQuietSites", accountIdParameter, quietdaysParameter);
        }
    
        public virtual int spGetRecordingsforAccount(Nullable<int> accountId, Nullable<int> firstRecordingId, string network)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var firstRecordingIdParameter = firstRecordingId.HasValue ?
                new ObjectParameter("firstRecordingId", firstRecordingId) :
                new ObjectParameter("firstRecordingId", typeof(int));
    
            var networkParameter = network != null ?
                new ObjectParameter("network", network) :
                new ObjectParameter("network", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetRecordingsforAccount", accountIdParameter, firstRecordingIdParameter, networkParameter);
        }
    
        public virtual int spGetRecordingsWithinRadius(string recordingIds, string loggerxLoc, Nullable<int> recordingXId, Nullable<System.DateTime> recordingXRST, string recordingXSitId)
        {
            var recordingIdsParameter = recordingIds != null ?
                new ObjectParameter("recordingIds", recordingIds) :
                new ObjectParameter("recordingIds", typeof(string));
    
            var loggerxLocParameter = loggerxLoc != null ?
                new ObjectParameter("loggerxLoc", loggerxLoc) :
                new ObjectParameter("loggerxLoc", typeof(string));
    
            var recordingXIdParameter = recordingXId.HasValue ?
                new ObjectParameter("RecordingXId", recordingXId) :
                new ObjectParameter("RecordingXId", typeof(int));
    
            var recordingXRSTParameter = recordingXRST.HasValue ?
                new ObjectParameter("RecordingXRST", recordingXRST) :
                new ObjectParameter("RecordingXRST", typeof(System.DateTime));
    
            var recordingXSitIdParameter = recordingXSitId != null ?
                new ObjectParameter("RecordingXSitId", recordingXSitId) :
                new ObjectParameter("RecordingXSitId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetRecordingsWithinRadius", recordingIdsParameter, loggerxLocParameter, recordingXIdParameter, recordingXRSTParameter, recordingXSitIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetSecureLoggerType(string loggertype)
        {
            var loggertypeParameter = loggertype != null ?
                new ObjectParameter("loggertype", loggertype) :
                new ObjectParameter("loggertype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetSecureLoggerType", loggertypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetSitesInLeak(Nullable<int> accountId, Nullable<int> daysinLeak)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var daysinLeakParameter = daysinLeak.HasValue ?
                new ObjectParameter("daysinLeak", daysinLeak) :
                new ObjectParameter("daysinLeak", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetSitesInLeak", accountIdParameter, daysinLeakParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetSitesinLeakWithinXDays(Nullable<int> accountId, Nullable<int> daysinLeak)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var daysinLeakParameter = daysinLeak.HasValue ?
                new ObjectParameter("daysinLeak", daysinLeak) :
                new ObjectParameter("daysinLeak", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetSitesinLeakWithinXDays", accountIdParameter, daysinLeakParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetSitesWithDevices(Nullable<int> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetSitesWithDevices", accountIdParameter);
        }
    
        public virtual ObjectResult<spPowerAutomate_SitesDevicesChannelNames_Result> spPowerAutomate_SitesDevicesChannelNames(string accountusername, Nullable<int> days)
        {
            var accountusernameParameter = accountusername != null ?
                new ObjectParameter("accountusername", accountusername) :
                new ObjectParameter("accountusername", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerAutomate_SitesDevicesChannelNames_Result>("spPowerAutomate_SitesDevicesChannelNames", accountusernameParameter, daysParameter);
        }
    
        public virtual ObjectResult<spPowerBI_APIQuotas_Result> spPowerBI_APIQuotas(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerBI_APIQuotas_Result>("spPowerBI_APIQuotas", daysParameter);
        }
    
        public virtual ObjectResult<spPowerBI_DatabaseFileSizes_Result> spPowerBI_DatabaseFileSizes(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerBI_DatabaseFileSizes_Result>("spPowerBI_DatabaseFileSizes", daysParameter);
        }
    
        public virtual ObjectResult<spPowerBI_DatabaseTableSizes_Result> spPowerBI_DatabaseTableSizes(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerBI_DatabaseTableSizes_Result>("spPowerBI_DatabaseTableSizes", daysParameter);
        }
    
        public virtual ObjectResult<spPowerBI_DeviceCountsByType_Result> spPowerBI_DeviceCountsByType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerBI_DeviceCountsByType_Result>("spPowerBI_DeviceCountsByType");
        }
    
        public virtual int spPowerBI_DGStats(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPowerBI_DGStats", daysParameter);
        }
    
        public virtual ObjectResult<spPowerBI_MessagesPerMinute_Result> spPowerBI_MessagesPerMinute(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerBI_MessagesPerMinute_Result>("spPowerBI_MessagesPerMinute", daysParameter);
        }
    
        public virtual ObjectResult<spPowerBI_SuperAdminUsers_Result> spPowerBI_SuperAdminUsers(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerBI_SuperAdminUsers_Result>("spPowerBI_SuperAdminUsers", daysParameter);
        }
    
        public virtual ObjectResult<spPowerBI_SuperAdminUsersALL_Result> spPowerBI_SuperAdminUsersALL(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerBI_SuperAdminUsersALL_Result>("spPowerBI_SuperAdminUsersALL", daysParameter);
        }
    
        public virtual ObjectResult<spPowerBI_UserLoginAudit_Result> spPowerBI_UserLoginAudit(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPowerBI_UserLoginAudit_Result>("spPowerBI_UserLoginAudit", daysParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spReturnActiveAccountIdsFromAccountIdList(string dmaIds)
        {
            var dmaIdsParameter = dmaIds != null ?
                new ObjectParameter("dmaIds", dmaIds) :
                new ObjectParameter("dmaIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spReturnActiveAccountIdsFromAccountIdList", dmaIdsParameter);
        }
    
        public virtual int spUpdateLNS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLNS");
        }
    
        public virtual int spUpdateLoggerTypeId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLoggerTypeId");
        }
    
        public virtual int spWriteStringToFile(string @string, string path, string filename)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("Filename", filename) :
                new ObjectParameter("Filename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWriteStringToFile", stringParameter, pathParameter, filenameParameter);
        }
    
        public virtual ObjectResult<spGetSurveyMeasurements_Result> spGetSurveyMeasurements(Nullable<long> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("accountID", accountID) :
                new ObjectParameter("accountID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSurveyMeasurements_Result>("spGetSurveyMeasurements", accountIDParameter);
        }
    
        public virtual ObjectResult<spGetSurveyMeasurementsBySurveyID_Result> spGetSurveyMeasurementsBySurveyID(Nullable<long> surveyID)
        {
            var surveyIDParameter = surveyID.HasValue ?
                new ObjectParameter("surveyID", surveyID) :
                new ObjectParameter("surveyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSurveyMeasurementsBySurveyID_Result>("spGetSurveyMeasurementsBySurveyID", surveyIDParameter);
        }
    
        public virtual int spDeleteLNSTable(string accountName)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("accountName", accountName) :
                new ObjectParameter("accountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteLNSTable", accountNameParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> spGetDateFromLNStable(Nullable<int> siteID, string accountName)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("accountName", accountName) :
                new ObjectParameter("accountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("spGetDateFromLNStable", siteIDParameter, accountNameParameter);
        }
    
        public virtual ObjectResult<spGetLNSData_Result> spGetLNSData(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLNSData_Result>("spGetLNSData", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetLoggerList_Result> spGetLoggerList(Nullable<int> accountID, Nullable<int> onlyActiveSites)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var onlyActiveSitesParameter = onlyActiveSites.HasValue ?
                new ObjectParameter("OnlyActiveSites", onlyActiveSites) :
                new ObjectParameter("OnlyActiveSites", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLoggerList_Result>("spGetLoggerList", accountIDParameter, onlyActiveSitesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetSiteById(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetSiteById", siteIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetSiteByLogger(string loggerID)
        {
            var loggerIDParameter = loggerID != null ?
                new ObjectParameter("loggerID", loggerID) :
                new ObjectParameter("loggerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetSiteByLogger", loggerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetSiteByLoggerSubstring(string loggerID)
        {
            var loggerIDParameter = loggerID != null ?
                new ObjectParameter("loggerID", loggerID) :
                new ObjectParameter("loggerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetSiteByLoggerSubstring", loggerIDParameter);
        }
    
        public virtual int spInsertDataLNStable(Nullable<int> siteID, string accountName, string siteAddress, Nullable<System.DateTime> date, Nullable<int> leak, Nullable<int> noise, Nullable<int> spread)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("accountName", accountName) :
                new ObjectParameter("accountName", typeof(string));
    
            var siteAddressParameter = siteAddress != null ?
                new ObjectParameter("siteAddress", siteAddress) :
                new ObjectParameter("siteAddress", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var leakParameter = leak.HasValue ?
                new ObjectParameter("leak", leak) :
                new ObjectParameter("leak", typeof(int));
    
            var noiseParameter = noise.HasValue ?
                new ObjectParameter("noise", noise) :
                new ObjectParameter("noise", typeof(int));
    
            var spreadParameter = spread.HasValue ?
                new ObjectParameter("spread", spread) :
                new ObjectParameter("spread", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertDataLNStable", siteIDParameter, accountNameParameter, siteAddressParameter, dateParameter, leakParameter, noiseParameter, spreadParameter);
        }
    
        public virtual ObjectResult<spGetSiteDetails_Result> spGetSiteDetails(string siteId, string jobType)
        {
            var siteIdParameter = siteId != null ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(string));
    
            var jobTypeParameter = jobType != null ?
                new ObjectParameter("JobType", jobType) :
                new ObjectParameter("JobType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteDetails_Result>("spGetSiteDetails", siteIdParameter, jobTypeParameter);
        }
    }
}
